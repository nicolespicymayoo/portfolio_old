'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _postcss = require('postcss');

var _postcss2 = _interopRequireDefault(_postcss);

var pseudoClasses = require('pseudo-classes');
var pseudoElements = require('pseudo-elements');
exports['default'] = _postcss2['default'].plugin('postcss-nested-props', function () {
    return function (root) {
        root.walkRules(function (rule) {
            unwrapRule([], rule);
        });
    };
});

var HAS_COLON = /:/;
var ALL_PSEUDO = pseudoClasses().concat(pseudoElements());
var HAS_PSEUDO_CLASSES_ELEMENTS = new RegExp(':(' + ALL_PSEUDO.join('|') + ')');
function unwrapRule(namespace, rule) {
    if (!HAS_COLON.test(rule.selector)) {
        return;
    }
    if (HAS_PSEUDO_CLASSES_ELEMENTS.test(rule.selector)) {
        return;
    }
    var parts = rule.selector.split(/:+/);
    var decl = _postcss2['default'].decl({
        prop: parts[0],
        value: parts[1]
    });
    if (decl.value) {
        rule.parent.insertBefore(rule, decl);
    }
    namespace.push(decl.prop);
    var dashedNamespace = namespace.join('-');
    rule.each(function (node) {
        switch (node.type) {
            case 'rule':
                unwrapRule(namespace, node);
                break;
            case 'decl':
                var decl2 = node;
                decl2.prop = dashedNamespace + '-' + decl2.prop;
                break;
        }
    });
    rule.walkDecls(function (decl2) {
        decl2.moveBefore(rule);
    });
    rule.remove();
    namespace.pop();
}
module.exports = exports['default'];